package dk.dtu.compute.se.pisd.roborally.client;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;

public class HttpClientAsynchronousPost {

    private static final HttpClient httpClient = HttpClient.newBuilder()
            .version(HttpClient.Version.HTTP_2) // Use HTTP/2
            .connectTimeout(Duration.ofSeconds(10)) // Timeout after 10 seconds
            .build();

    public static void main(String[] args) throws Exception {
        // Make a GET request to fetch games (for demonstration)
        fetchGames();

        // Make a POST request to add a new game
        Games newGame = createNewGame();
        addGame(newGame);
    }

    private static void fetchGames() throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .GET()
                .uri(URI.create("http://localhost:8080/getGames")) // Replace with your endpoint
                .build();

        httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(HttpResponse::body)
                .thenAccept(response -> {
                    try {
                        ObjectMapper objectMapper = new ObjectMapper();
                        List<Games> gamesList = objectMapper.readValue(response, new com.fasterxml.jackson.core.type.TypeReference<List<Games>>() {
                        });

                        // Print the games (for demonstration)
                        for (Games game : gamesList) {
                            System.out.println(game);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                })
                .join(); // Block main thread to wait for completion (for demonstration)
    }

    private static Games createNewGame() {
        Games newGame = new Games();
        newGame.setGameId(5);
        newGame.setGameName("MIWSI");
        newGame.setPlayersAmount(4);
        newGame.setJoinedPlayers(4);
        newGame.setGameStatus(0);

        Board board = new Board();
        board.setBoardId(5);
        board.setBoardName("MIWSISI");
        newGame.setBoard(board);

        return newGame;
    }

    public static void addGame(Games game) {
        try {
            // Convert Games object to JSON string
            String jsonBody = new ObjectMapper().writeValueAsString(game);

            System.out.println("JSON Payload to Send:");
            System.out.println(jsonBody);

            // Prepare HTTP POST request
            HttpRequest request = HttpRequest.newBuilder()
                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
                    .uri(URI.create("http://localhost:8080/createGame")) // Replace with your endpoint
                    .header("Content-Type", "application/json")
                    .build();

            // Send HTTP POST request asynchronously
            httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                    .thenApply(HttpResponse::body)
                    .thenAccept(response -> {
                        System.out.println("Game added successfully: " + response);
                        // Handle success or failure as needed
                    })
                    .join(); // Block main thread to wait for completion (for demonstration)
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Games class
    public static class Games {
        @JsonProperty("game_id")
        private int gameId; // Assuming game_id is autogenerated and Long type

        @JsonProperty("game_name")
        private String gameName;

        @JsonProperty("players_amount")
        private int playersAmount;

        @JsonProperty("joined_players")
        private int joinedPlayers;

        @JsonProperty("game_status")
        private int gameStatus;

        @JsonProperty("board_id")
        private Board board;

        // Getters and setters for non-autogenerated fields

        public void setGameId (int gameId) {
            this.gameId = gameId;
        }
        public String getGameName() {
            return gameName;
        }

        public void setGameName(String gameName) {
            this.gameName = gameName;
        }

        public int getPlayersAmount() {
            return playersAmount;
        }

        public void setPlayersAmount(int playersAmount) {
            this.playersAmount = playersAmount;
        }

        public int getJoinedPlayers() {
            return joinedPlayers;
        }

        public void setJoinedPlayers(int joinedPlayers) {
            this.joinedPlayers = joinedPlayers;
        }

        public int getGameStatus() {
            return gameStatus;
        }

        public void setGameStatus(int gameStatus) {
            this.gameStatus = gameStatus;
        }

        public Board getBoard() {
            return board;
        }

        public void setBoard(Board board) {
            this.board = board;
        }

        // Getters for autogenerated fields
        public int getGameId() {
            return gameId;
        }

        // No setter for gameId as it's autogenerated

        // toString method
        @Override
        public String toString() {
            return "Games{" +
                    "gameId=" + gameId +
                    ", gameName='" + gameName + '\'' +
                    ", playersAmount=" + playersAmount +
                    ", joinedPlayers=" + joinedPlayers +
                    ", gameStatus=" + gameStatus +
                    ", board=" + board +
                    '}';
        }
    }

    // Board class
    public static class Board {
        @JsonProperty("board_id")
        private int boardId;

        @JsonProperty("board_name")
        private String boardName;

        // Getters and setters for non-autogenerated fields
        public String getBoardName() {
            return boardName;
        }

        public void setBoardId (int boardId) {
            this.boardId = boardId;
        }

        public void setBoardName(String boardName) {
            this.boardName = boardName;
        }

        // Getters for autogenerated fields
        public int getBoardId() {
            return boardId;
        }

        // No setter for boardId as it's autogenerated

        // toString method
        @Override
        public String toString() {
            return "Board{" +
                    "boardId=" + boardId +
                    ", boardName='" + boardName + '\'' +
                    '}';
        }
    }
}
